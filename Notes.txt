All hooks covered in this repo
  1. useState

tanStack query
   or
react query 
(handle caching and validation)

for the dev-tools(flower one)
<ReactQueryDevtools/> 

have to read convertion in java
string to int 
int to array
int to string
string to array 
(vice-versa of all)



Genreal String Trick 
1. 
String s = "123";
int num = Integer.parseInt(s);
System.out.println(num + 1);  // Output: 124

2. string.format(%03d, number) 007
    string.format(%06.3f,number) 007.000






BITS MANUPLIATION
 1. Check if a number is even or odd

The least significant bit (LSB) of even numbers is 0, and for odd numbers it's 1.
ðŸ”¹ 2. Swap two numbers without a temporary variable

Uses XOR to swap values.
ðŸ”¹ 3. Check if a number is a power of 2

Only one bit is set in powers of 2.
ðŸ”¹ 4. Count the number of set bits (Hamming weight)

Efficient way to count 1s in binary representation.
ðŸ”¹ 5. Turn off the rightmost set bit

Useful in many algorithms like counting set bits.
ðŸ”¹ 6. Isolate the rightmost set bit

Gives a number with only the rightmost set bit of n.
ðŸ”¹ 7. Check if a number is a power of 4

As discussed earlier.
ðŸ”¹ 8. Find the position of the rightmost set bit

Gives the index (0-based) of the rightmost set bit.
ðŸ”¹ 9. Set or clear a specific bit
Set bit at position i:

Clear bit at position i:

ðŸ”¹ 10. Toggle a specific bit

Would you like me to show how these tricks can be used in real-world problems or competitive programming challenges?






#interview Question

 1- There's a page that is slow. How would you pinpoint the issue and how would you fix it ?

2- There's a button that when you click on it, it fires an event. Make sure that the user can click the button again after 2 second ( disable the button ). How would you implement this ?

3- What's the difference between state and prop?

4- How would you implement accessibility?

5- What's the difference between justify around and justify even (CSS)?

6- What's the difference between git merge and rebase?

7- What's cherry pick in git?

8- What's the difference between type and interface in typescript?

9- How can you reduce unnecessary rerenders ? 





import React, { useState } from 'react';

const MyComponent = React.lazy(() => import('./MyComponent'));

function App() {
  const [show, setShow] = useState(false);

  return (
    <div>
      <button onClick={() => setShow(true)}>Load Component</button>
      {show && (
        <React.Suspense fallback={<div>Loading...</div>}>
          <MyComponent />
        </React.Suspense>
      )}
    </div>
  );
}

export default App;

React.lazy() is used to lazy-load the MyComponent module.
React.Suspense provides a fallback UI (e.g., a loading spinner) while the lazy-loaded component is being fetched.

